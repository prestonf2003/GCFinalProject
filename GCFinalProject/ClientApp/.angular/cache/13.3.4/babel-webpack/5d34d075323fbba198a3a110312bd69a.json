{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CharacterService = /*#__PURE__*/(() => {\n  class CharacterService {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.currentUser = \"\";\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8'); // We don't need headers or requestOption, but it makes console less bad.\n\n      this.requestOptions = {\n        headers: this.headers,\n        responseType: 'text'\n      };\n      this.urlRoot = baseUrl;\n    }\n\n    showAllCharacters() {\n      return this.http.get(this.urlRoot + \"character/ShowAllCharacters\");\n    }\n\n    getCharacterById(id) {\n      return this.http.get(this.urlRoot + \"character/GetCharacterById/\" + id);\n    }\n\n    getCharacterByName(name) {\n      return this.http.get(this.urlRoot + \"character/GetCharacterByName/\" + name);\n    }\n\n    createCharacter(c) {\n      return this.http.put(this.urlRoot + \"character/CreateCharacter/\", c, this.requestOptions);\n    }\n\n    updateCharacter(id, c) {\n      return this.http.post(this.urlRoot + \"character/UpdateCharacter/\" + id, c, this.requestOptions);\n    }\n\n    deleteCharacter(id) {\n      return this.http.delete(this.urlRoot + \"character/DeleteCharacter/\" + id, this.requestOptions);\n    }\n\n    showAllUsers() {\n      return this.http.get(this.urlRoot + \"user/ShowAllUsers\");\n    }\n\n    createUser(u) {\n      return this.http.put(this.urlRoot + \"user/CreateUser\", u, this.requestOptions);\n    }\n\n    updateUser(id, u) {\n      return this.http.post(this.urlRoot + \"user/UpdateUser\" + id, u, this.requestOptions);\n    }\n\n    deleteUser(id) {\n      return this.http.delete(this.urlRoot + \"user/DeleteUser\" + id, this.requestOptions);\n    }\n\n    login(userId) {\n      this.http.get(this.urlRoot + \"user/login\" + userId, this.requestOptions);\n      userId = userId.toLocaleLowerCase();\n      this.currentUser = userId[0].toUpperCase() + userId.slice(1);\n    }\n\n    logout() {\n      this.currentUser = \"\";\n    }\n\n  }\n\n  CharacterService.ɵfac = function CharacterService_Factory(t) {\n    return new (t || CharacterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n\n  CharacterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CharacterService,\n    factory: CharacterService.ɵfac,\n    providedIn: 'root'\n  });\n  return CharacterService;\n})();","map":null,"metadata":{},"sourceType":"module"}